[gd_scene load_steps=9 format=2]

[ext_resource path="res://DarkTheme/Dark.theme" type="Theme" id=1]
[ext_resource path="res://DarkTheme/Fonts/Ubuntu-L.ttf" type="DynamicFontData" id=2]
[ext_resource path="res://Orbit_control.tscn" type="PackedScene" id=3]
[ext_resource path="res://Spatial.tscn" type="PackedScene" id=4]
[ext_resource path="res://Earth_map.tscn" type="PackedScene" id=5]

[sub_resource type="GDScript" id=3]
script/source = "extends Control
export (PackedScene) var Orbit_control

# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"

var orbit_count = 0
# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass
func changed_orbit(name):
	var orbit_conf = $HSplitContainer/Left_Organize/Orbit_Container.find_node(name, true, false)
	var orbit_3d = $\"HSplitContainer/TabContainer/3D View/Viewport/Spatial\".find_node(name, true, false)
	orbit_3d.mesh = orbit_conf.Points
	var points = calc_groundpath(orbit_conf.semi_major,orbit_conf.Vertices)
	$\"HSplitContainer/TabContainer/2D View/Viewport/Node2D\".update_orbit(name,orbit_conf.color,points)

func orbit_delete(name):
	var orbit_3d = $\"HSplitContainer/TabContainer/3D View/Viewport/Spatial\".find_node(name, true, false)
	orbit_3d.queue_free()
	$\"HSplitContainer/TabContainer/2D View/Viewport/Node2D\".remove_orbit(name)

func _on_Add_orbit_Button_pressed():
	var ctrl = Orbit_control.instance()
	orbit_count+=1
	ctrl.name = \"Orbit_%02d\" % orbit_count
	ctrl.color = Color.cyan
	$HSplitContainer/Left_Organize/Orbit_Container.add_child(ctrl)
	ctrl.connect(\"changed\",self,\"changed_orbit\")
	ctrl.connect(\"delete\",self,\"orbit_delete\")
	var mesh = MeshInstance.new()
	mesh.mesh = ctrl.Points
	mesh.name = ctrl.name
	$\"HSplitContainer/TabContainer/3D View/Viewport/Spatial\".add_child(mesh)
	var points = calc_groundpath(ctrl.semi_major,ctrl.Vertices)
	$\"HSplitContainer/TabContainer/2D View/Viewport/Node2D\".update_orbit(ctrl.name,Color.cyan,points)



func calc_groundpath(semi_major,points):
	var T = 2*PI*sqrt(pow(semi_major,3)/398600.4)
	var area = 0
	var rot_earth = 2*PI/86164
	#Calculate area of complete ellipse to calculate the time/area constant
	for i in range(0,len(points),2):
		area += points[i].cross(points[i+1]).length()/2
	var tpa = T/area
	var area_gone = 0
	var points_out = []
	var points_in = points+points
	for i in range(0,len(points_in),2):
		var p1 = to_2d(points_in[i])
		p1.x = p1.x - rot_earth*area_gone*tpa
		p1.x = fposmod(p1.x,2*PI)
		area_gone += points_in[i].cross(points_in[i+1]).length()/2
		var p2 = to_2d(points_in[i+1])
		p2.x = p2.x - rot_earth*area_gone*tpa
		p2.x = fposmod(p2.x,2*PI)
		p1 = p1 * Vector2(1024.0/(2*PI),512.0/(PI))
		p2 = p2 * Vector2(1024.0/(2*PI),512.0/(PI))
		points_out.append(p1)
		points_out.append(p2)
	#points_out.resize(1800)
	return points_out
	

	
func to_2d(point):
	var point_in  = point.normalized()
	var lng = fposmod(atan2(point_in.x,point_in.z),2*PI)
	var lat = -asin(point_in.y)
	return Vector2(lng,lat)
"

[sub_resource type="DynamicFont" id=1]
size = 32
use_filter = true
font_data = ExtResource( 2 )

[sub_resource type="GDScript" id=2]
script/source = "extends ViewportContainer


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"

var dragging = false
var position = Vector2()
# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	pass

func _input(event):
	if event is InputEventMouseButton:
		if event.button_index == BUTTON_LEFT and not event.pressed:
			dragging = false
	if event is InputEventMouseMotion and dragging:
		var mouse_pos = get_local_mouse_position()
		var distance = mouse_pos -position
		var angle = distance/rect_size*10
		distance = mouse_pos
		$Viewport/Spatial.rotate_by(-angle.y,-angle.x)
func _gui_input(event):
	if event is InputEventMouseButton:
		print(event.button_index)
		if event.button_index == BUTTON_WHEEL_UP:
			$Viewport/Spatial.zoom_in()
		if event.button_index == BUTTON_WHEEL_DOWN:
			$Viewport/Spatial.zoom_out()
		if event.button_index == BUTTON_LEFT:
			dragging = event.pressed
			position = get_local_mouse_position()

"

[node name="Control" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
theme = ExtResource( 1 )
script = SubResource( 3 )
Orbit_control = ExtResource( 3 )

[node name="Panel" type="Panel" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
theme = ExtResource( 1 )

[node name="HSplitContainer" type="HSplitContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="Left_Organize" type="VBoxContainer" parent="HSplitContainer"]
margin_right = 509.0
margin_bottom = 600.0
size_flags_horizontal = 3

[node name="Label" type="Label" parent="HSplitContainer/Left_Organize"]
margin_top = -1.0
margin_right = 509.0
margin_bottom = 42.4
theme = ExtResource( 1 )
custom_fonts/font = SubResource( 1 )
text = "Orbits"

[node name="Orbit_Container" type="VBoxContainer" parent="HSplitContainer/Left_Organize"]
margin_top = 46.0
margin_right = 509.0
margin_bottom = 46.0

[node name="Add_orbit_Button" type="Button" parent="HSplitContainer/Left_Organize"]
margin_top = 49.0
margin_right = 115.0
margin_bottom = 82.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 0
size_flags_vertical = 0
text = "Add Orbit"

[node name="TabContainer" type="TabContainer" parent="HSplitContainer"]
margin_left = 515.0
margin_right = 1024.0
margin_bottom = 600.0
size_flags_horizontal = 3
theme = ExtResource( 1 )
tab_align = 0

[node name="3D View" type="ViewportContainer" parent="HSplitContainer/TabContainer"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 4.0
margin_top = 41.0
margin_right = -4.0
margin_bottom = -4.0
stretch = true
script = SubResource( 2 )

[node name="Viewport" type="Viewport" parent="HSplitContainer/TabContainer/3D View"]
size = Vector2( 501, 555 )
handle_input_locally = false
render_target_update_mode = 3

[node name="Spatial" parent="HSplitContainer/TabContainer/3D View/Viewport" instance=ExtResource( 4 )]

[node name="2D View" type="ViewportContainer" parent="HSplitContainer/TabContainer"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 4.0
margin_top = 41.0
margin_right = -4.0
margin_bottom = -4.0
stretch = true

[node name="Viewport" type="Viewport" parent="HSplitContainer/TabContainer/2D View"]
size = Vector2( 501, 555 )
size_override_stretch = true
handle_input_locally = false
hdr = false
usage = 0
render_target_update_mode = 0

[node name="Node2D" parent="HSplitContainer/TabContainer/2D View/Viewport" instance=ExtResource( 5 )]

[connection signal="pressed" from="HSplitContainer/Left_Organize/Add_orbit_Button" to="." method="_on_Add_orbit_Button_pressed"]
