[gd_scene load_steps=12 format=2]

[ext_resource path="res://Scripts/Camera.gd" type="Script" id=2]
[ext_resource path="res://resources/2k_earth_daymap.jpg" type="Texture" id=3]
[ext_resource path="res://resources/th-3416968832.jpeg" type="Texture" id=4]

[sub_resource type="GDScript" id=5]
script/source = "extends Spatial


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"
var zoom_factor = 1.1
var lat = 53.075833/180.0*PI
var lng = 8.807222/180.0*PI
# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass
func zoom_in():
	$Camera_helper.scale = $Camera_helper.scale/zoom_factor
func zoom_out():
	$Camera_helper.scale = $Camera_helper.scale*zoom_factor

func rotate_by(x,y):
	$Camera_helper.rotation_degrees = $Camera_helper.rotation_degrees + Vector3(x,y,0)

func set_sun_angle(unix):
	var dt = fposmod(unix-PlanetInfo.solstice_unix_offset,PlanetInfo.period)
	var angle = 360*dt/PlanetInfo.period
	var time = Time.get_time_dict_from_unix_time(unix)
	var earth_rot = (float(time.hour)/24.0
					+float(time.minute)/1440.0
					+float(time.second)/86400)*360
	$Earth.rotation_degrees.y = angle + earth_rot
	$Tilt/Sun_orbit.rotation_degrees.y = angle
"

[sub_resource type="SphereMesh" id=10]
radius = 6.5
height = 13.0

[sub_resource type="Shader" id=8]
code = "shader_type spatial;
//render_mode unshaded;
const vec3 sphere_position = vec3(0.0,0.0,0.0);
const float sphere_radius = 6.471;
uniform float thickness_scale = 0.5;
varying vec3 cam_position;
bool raySphereIntersectBool(vec3 ro, vec3 rd,vec3 so, float sr){
	float t = dot(so-ro,rd);
	vec3 P = ro + rd*t;
	float y = length(so -P);
	return y <= sr;
}
vec2 raySpehereIntersectMaxDepth(vec3 ro, vec3 rd,vec3 so, float sr, float max_depth){
	float t = dot(so-ro,rd);
	vec3 P = ro + rd*t;
	float y = length(so -P);
	
	if (y>sr){
		return vec2(-1.0);
	}
	float x = sqrt(sr*sr - y*y);
	float t1 = max(t-x,0.0);
	float t2 = min(t+x,max_depth);
	return vec2(t1,t2);
}
void vertex(){
	cam_position = MODELVIEW_MATRIX[3].xyz;
}

void fragment(){
	float depth = texture(DEPTH_TEXTURE,SCREEN_UV).x;
	vec3 ndc = vec3(SCREEN_UV, depth) * 2.0 - 1.0;
	vec4 view = INV_PROJECTION_MATRIX * vec4(ndc,1.0);
	view.xyz/= view.w;
	float max_depth = length(view.xyz);
	vec3 so =- (vec4(sphere_position, 1.0) * CAMERA_MATRIX).xyz;
	vec2 rsi = raySpehereIntersectMaxDepth(cam_position, VIEW, so , sphere_radius, max_depth);
	
	ALPHA = clamp((rsi.y - rsi.x)*thickness_scale,0.0,1.0);
}
"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 8 )
shader_param/thickness_scale = 0.08

[sub_resource type="SphereMesh" id=2]
radius = 6.371
height = 12.742

[sub_resource type="SpatialMaterial" id=3]
albedo_texture = ExtResource( 3 )

[sub_resource type="PanoramaSky" id=7]
panorama = ExtResource( 4 )

[sub_resource type="Environment" id=6]
background_mode = 1
background_sky = SubResource( 7 )
ambient_light_color = Color( 1, 1, 1, 1 )
ambient_light_energy = 0.05

[node name="Spatial" type="Spatial"]
script = SubResource( 5 )

[node name="Atmosphere" type="MeshInstance" parent="."]
mesh = SubResource( 10 )
skeleton = NodePath("../Earth")
material/0 = SubResource( 9 )

[node name="Earth" type="MeshInstance" parent="."]
mesh = SubResource( 2 )
material/0 = SubResource( 3 )

[node name="Tilt" type="Spatial" parent="."]
transform = Transform( 0.917755, -0.397148, 0, 0.397148, 0.917755, 0, 0, 0, 1, 0, 0, 0 )

[node name="Sun_orbit" type="Spatial" parent="Tilt"]
transform = Transform( -4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 0, 0, 0 )

[node name="DirectionalLight" type="DirectionalLight" parent="Tilt/Sun_orbit"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 30 )

[node name="Camera_helper" type="Spatial" parent="."]

[node name="Camera" type="Camera" parent="Camera_helper"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 17.8223 )
keep_aspect = 0
current = true
far = 10000.0
script = ExtResource( 2 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 6 )
